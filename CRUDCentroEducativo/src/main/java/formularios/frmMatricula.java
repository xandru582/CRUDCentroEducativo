/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package formularios;

import com.mycompany.crudcentroeducativo.Entidades.Alumno;
import com.mycompany.crudcentroeducativo.Entidades.Matricula;
import com.mycompany.crudcentroeducativo.Entidades.Unidad;
import com.mycompany.crudcentroeducativo.controladorDAO.AlumnoDaoImp;
import com.mycompany.crudcentroeducativo.controladorDAO.MatriculaDaoImp;
import com.mycompany.crudcentroeducativo.controladorDAO.UnidadDaoImp;
import java.sql.Date;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author alejandrobalangutierrez
 */
public class frmMatricula extends javax.swing.JFrame {

    private int idMatriculaInterno;

    public void setIdMatricula(int id) {
        this.idMatriculaInterno = id;
        // Puedes usar el ID para cargar los datos correspondientes en el formulario
        cargarDatosMatricula(idMatriculaInterno);
    }
    public frmTablaMatricula miTablaInterna;
    /**
     * Creates new form frmMatricula
     */
    public frmMatricula() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCodigoUnidad = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtFmatricula = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtFbaja = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnRestablecer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MATRICULA");

        jLabel2.setText("DNI Alumno");

        jLabel3.setText("CÃ³digo Unidad");

        jLabel4.setText("Fecha Matricula");

        jLabel5.setText("Fecha de Baja");

        jLabel6.setText("Formato de fecha: YYYY-MM-D");

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnRestablecer.setText("Restablecer");
        btnRestablecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestablecerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(78, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txtFbaja, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtCodigoUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtFmatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(107, 107, 107))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAgregar)
                .addGap(18, 18, 18)
                .addComponent(btnActualizar)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addGap(18, 18, 18)
                .addComponent(btnRestablecer)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCodigoUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtFmatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtFbaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnActualizar)
                    .addComponent(btnEliminar)
                    .addComponent(btnRestablecer))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        agregarMatricula();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnRestablecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestablecerActionPerformed
        // TODO add your handling code here:
        RestablecerCampos();
    }//GEN-LAST:event_btnRestablecerActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        eliminarMatricula(idMatriculaInterno);
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        actualizarMatricula();
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMatricula.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMatricula.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMatricula.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMatricula.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMatricula().setVisible(true);
            }
        });
    }

    private void agregarMatricula() {
        try {
            String dni = txtDNI.getText();
            String codigoUnidad = txtCodigoUnidad.getText();
            String fMatricula = txtFmatricula.getText();
            String fBaja = txtFbaja.getText();

            // Validar campos obligatorios
            if (dni.isEmpty() || codigoUnidad.isEmpty() || fMatricula.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos obligatorios.", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Obtener ID de alumno por DNI
            AlumnoDaoImp alumnoDao = AlumnoDaoImp.getInstance();
            Alumno alumno = alumnoDao.getByDni(dni);
            if (alumno == null) {
                JOptionPane.showMessageDialog(this, "El alumno con DNI " + dni + " no existe.", "Alumno no encontrado", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int idAlumno = alumno.getId();

            // Obtener ID de unidad por cÃ³digo
            UnidadDaoImp unidadDao = UnidadDaoImp.getInstance();
            Unidad unidad = unidadDao.getByCodigo(codigoUnidad);
            if (unidad == null) {
                JOptionPane.showMessageDialog(this, "La unidad con cÃ³digo " + codigoUnidad + " no existe.", "Unidad no encontrada", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int idUnidad = unidad.getId();

            // Crear objeto Matricula
            Matricula matricula = new Matricula();
            matricula.setIdalumno(idAlumno);
            matricula.setIdunidad(idUnidad);
            matricula.setFmatricula(Date.valueOf(fMatricula));
            if (!fBaja.isEmpty()) {
                matricula.setfBaja(Date.valueOf(fBaja));
            }

            // Agregar matricula a la base de datos
            MatriculaDaoImp matriculaDao = MatriculaDaoImp.getInstance();
            try {
                matriculaDao.add(matricula);
                JOptionPane.showMessageDialog(this, "MatrÃ­cula agregada correctamente.", "Ãxito", JOptionPane.INFORMATION_MESSAGE);

                // Limpiar campos
                RestablecerCampos();
                miTablaInterna.cargaTabla();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al agregar la matrÃ­cula.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(frmMatricula.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void RestablecerCampos() {
        txtDNI.setText("");
        txtCodigoUnidad.setText("");
        txtFmatricula.setText("");
        txtFbaja.setText("");
    }

    private void eliminarMatricula(int idMatricula) {
        MatriculaDaoImp matriculaDao = MatriculaDaoImp.getInstance();
        try {
            if (idMatricula != 0) {
                matriculaDao.delete(idMatricula);
                miTablaInterna.cargaTabla();
                JOptionPane.showMessageDialog(this, "MatrÃ­cula eliminada correctamente.", "Ãxito", JOptionPane.INFORMATION_MESSAGE);
            }
            // Limpiar campos
            RestablecerCampos();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar la matrÃ­cula.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void actualizarMatricula() {
        MatriculaDaoImp matriculaDao = MatriculaDaoImp.getInstance();
        AlumnoDaoImp alumnoDao = AlumnoDaoImp.getInstance();
        UnidadDaoImp unidadDao = UnidadDaoImp.getInstance();

        try {
            String dniAlumno = txtDNI.getText();
            String codigoUnidad = txtCodigoUnidad.getText();
            Date fechaMatricula = Date.valueOf(txtFmatricula.getText());
            Date fechaBaja = Date.valueOf(txtFbaja.getText());

            // Obtener el objeto de alumno por DNI
            Alumno alumno = alumnoDao.getByDni(dniAlumno);

            if (alumno != null) {
                // Obtener el ID de alumno
                int idAlumno = alumno.getId();

                // Obtener el objeto de unidad por cÃ³digo
                Unidad unidad = unidadDao.getByCodigo(codigoUnidad);

                if (unidad != null) {
                    // Obtener el ID de unidad
                    int idUnidad = unidad.getId();

                    // Crear el objeto de matrÃ­cula
                    Matricula matricula = new Matricula();
                    matricula.setIdmatricula(idMatriculaInterno);
                    matricula.setIdalumno(idAlumno);
                    matricula.setIdunidad(idUnidad);
                    matricula.setFmatricula(fechaMatricula);
                    matricula.setfBaja(fechaBaja);

                    // Actualizar la matrÃ­cula en la base de datos
                    int rowsAffected = matriculaDao.update(matricula);
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "MatrÃ­cula actualizada correctamente.", "Ãxito", JOptionPane.INFORMATION_MESSAGE);

                        // Limpiar campos
                        RestablecerCampos();
                        miTablaInterna.cargaTabla();
                    } else {
                        JOptionPane.showMessageDialog(this, "Error al actualizar la matrÃ­cula.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontrÃ³ la unidad.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se encontrÃ³ el alumno.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar la matrÃ­cula.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarDatosMatricula(int id) {
        MatriculaDaoImp matriculaDaoImp = MatriculaDaoImp.getInstance();
        AlumnoDaoImp alumnoDaoImp = AlumnoDaoImp.getInstance();
        UnidadDaoImp unidadDaoImp = UnidadDaoImp.getInstance();

        try {
            // Obtener la matrÃ­cula por su ID
            Matricula matricula = matriculaDaoImp.getById(id);

            // Obtener el alumno y la unidad relacionados a la matrÃ­cula
            Alumno alumno = alumnoDaoImp.getById(matricula.getIdalumno());
            Unidad unidad = unidadDaoImp.getById(matricula.getIdunidad());

            // Cargar los datos en los campos correspondientes del formulario
            txtDNI.setText(alumno.getDni());
            txtCodigoUnidad.setText(unidad.getCodigo());
           
            txtFmatricula.setText(matricula.getFmatricula().toString());
            txtFbaja.setText(matricula.getfBaja() != null ? matricula.getfBaja().toString() : "");
        } catch (Exception e) {
            // Manejar cualquier excepciÃ³n que ocurra durante la carga de datos
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRestablecer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtCodigoUnidad;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtFbaja;
    private javax.swing.JTextField txtFmatricula;
    // End of variables declaration//GEN-END:variables
}
